<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XML</name>
    </assembly>
    <members>
        <member name="T:XML.XMLTree">
            <summary>
            Dateistruktur zur Anzeige und Organisation von XML Daten
            </summary>
        </member>
        <member name="M:XML.XMLTree.#ctor(XML.XMLTree,System.String)">
            <summary>
            Erzeugt einen neuenen XML Baum
            </summary>
            <param name="parent">Vater Element</param>
            <param name="name">Knoten Namen</param>
        </member>
        <member name="M:XML.XMLTree.getParent">
            <summary>
            Gibt den Vater des aktuellen Knotens an
            </summary>
            <returns>Vaterknoten</returns>
        </member>
        <member name="M:XML.XMLTree.addChild(XML.XMLTree)">
            <summary>
            Fügt dem Element einenen neuen Kindknoten hinzu
            </summary>
            <param name="child">der Hinzuzufügende Kindknoten</param>
        </member>
        <member name="M:XML.XMLTree.setValue(System.String)">
            <summary>
            Setzt den Wert des aktuellen Elements auf den gesetzten Wert
            </summary>
            <param name="value">der zu setztende Wert</param>
        </member>
        <member name="M:XML.XMLTree.getKey">
            <summary>
            Liefert den Schlüsselnamen des aktuellen Elements zurück
            </summary>
            <returns>Schlüsselname</returns>
        </member>
        <member name="M:XML.XMLTree.getValue">
            <summary>
            Liefert den Wert des aktuellen Knotens zurück
            </summary>
            <returns>Aktueller Wert</returns>
        </member>
        <member name="M:XML.XMLTree.getChildren">
            <summary>
            Liefert die Kinder als LinkedList zurück, für die verwendung mit foreach
            </summary>
            <returns>Liefert eine LinkedList</returns>
        </member>
        <member name="M:XML.XMLTree.haveChildren">
            <summary>
            Fragt nach, ob der aktuelle Knoten Kinder hat
            </summary>
            <returns>Hat der aktuelle Knoten Kinder</returns>
        </member>
        <member name="M:XML.XMLTree.haveChild(System.String)">
            <summary>
            Bestitzt der aktuelle Knoten ein bestimmtes Kind
            </summary>
            <param name="child">Das zu suchende Kind als String</param>
            <returns>Ist das Element vorhanden</returns>
        </member>
        <member name="M:XML.XMLTree.GetEnumerator">
            <summary>
            Liefert einen Enumerator
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:XML.XMLTree.haveChild(XML.XMLTree)">
            <summary>
            Bestitzt der aktuelle Knoten ein bestimmtes Kind
            </summary>
            <param name="child">Das zu suchende Kind als <see cref="T:XML.XMLTree"/></param>
            <returns>Ist das Element vorhanden</returns>
        </member>
        <member name="M:XML.XMLTree.getChild(System.String)">
            <summary>
            Liefert das <see cref="T:XML.XMLTree"/> Objekt mit einem bestimmten Schlüsselnamen
            </summary>
            <param name="child">Das zu suchende Kind als string</param>
            <returns>Das Element, wenn nicht vorhanden null</returns>
        </member>
        <member name="M:XML.XMLTree.addAtribute(System.String,System.String)">
            <summary>
            Fügt ein Atribut dem aktuellem Element hinzu
            </summary>
            <param name="key">Schlüssel</param>
            <param name="atribut">Wert</param>
        </member>
        <member name="M:XML.XMLTree.getAtributes">
            <summary>
            Gibt die Atribute in einer Generischen Tabelle zurück
            </summary>
            <returns>Generische Tabelle mit Atributen</returns>
        </member>
        <member name="T:XML.XMLParser">
            <summary>
            Klasse zur Verwaltung von XML Dateien
            </summary>
        </member>
        <member name="M:XML.XMLParser.read(System.String)">
            <summary>
            Liest eine XML Datei ein und liefert ein <see cref="T:XML.XMLTree"/> Objekt
            </summary>
            <param name="path">relative Pfad Angabe</param>
            <returns>Liefert ein <see cref="T:XML.XMLTree"/> Objekt</returns>
        </member>
        <member name="M:XML.XMLParser.readString(System.String)">
            <summary>
            Liest einen String ein und liefert den XMLTree
            </summary>
            <param name="input">XML Eingabetext</param>
            <returns>XMLTree Instanz</returns>
        </member>
        <member name="M:XML.XMLParser.parse(System.Xml.XmlLinkedNode)">
            <summary>
            Verarbeitet die XML Datei
            </summary>
        </member>
        <member name="M:XML.XMLParser.save(XML.XMLTree)">
            <summary>
            Speicher den Baum in ein XMLDocument Objekt
            </summary>
            <param name="element">Das zu speichernde Objekt</param>
            <returns>XMLObjekt Instanz</returns>
        </member>
        <member name="M:XML.XMLParser.save(XML.XMLTree,System.String)">
            <summary>
            Speichert den Baum in eine Datei
            </summary>
            <param name="element">Das zu speichernde Objekt</param>
            <param name="filename">Pfad zur Datei</param>
            <returns></returns>
        </member>
        <member name="M:XML.XMLParser.write(XML.XMLTree,System.Xml.XmlNode)">
            <summary>
            Rekursiver Speicheralgorithmus
            </summary>
            <param name="element">Das zu speichernde Objekt</param>
            <param name="parent">Vater Knoten</param>
            <returns>erstellter Hauptknoten</returns>
        </member>
    </members>
</doc>
