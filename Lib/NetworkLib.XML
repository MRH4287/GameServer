<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetworkLib</name>
    </assembly>
    <members>
        <member name="T:Network.TCPClient">
            <summary>
            Der TCP Client
            </summary>
        </member>
        <member name="F:Network.TCPClient.client">
            <summary>
            Die Verbindung zum Server
            </summary>
        </member>
        <member name="M:Network.TCPClient.#ctor(System.String,System.Int32)">
            <summary>
            Konstruktor für <see cref="T:Network.TCPClient"/>
            </summary>
            <param name="serverIP">Die IP des Servers</param>
            <param name="port">Port</param>
        </member>
        <member name="M:Network.TCPClient.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Konstruktor der Klasse <see cref="T:Network.TCPClient"/>
            </summary>
            <param name="serverIP">Die IP des Servers</param>
            <param name="port">Port</param>
            <param name="password">Angeben, wenn verschlüsselte Daten zu erwarten sind und nicht das standard Passwort verwendet wird</param>
        </member>
        <member name="M:Network.TCPClient.TCP_Connect">
            <summary>
            Verbindet zum Server mit den angegebenen Daten
            </summary>
            <returns>Liefert true bei einer erfolgreichen Verbindung</returns>
        </member>
        <member name="M:Network.TCPClient.TCP_Close">
            <summary>
            Beendet den TCP Client
            </summary>
        </member>
        <member name="M:Network.TCPClient.TCP_Send(System.String)">
            <summary>
            Sendet einen String zum Serer
            </summary>
            <param name="data">Zu sendener String</param>
        </member>
        <member name="M:Network.TCPClient.TCP_Disconnect">
            <summary>
            Trennt die Verbindung zu Server
            </summary>
        </member>
        <member name="M:Network.TCPClient.TCP_SendByteStream(System.Byte[])">
            <summary>
            Schickt einen Byte Stream an den Server
            </summary>
            <param name="data">Byte Stream</param>
        </member>
        <member name="M:Network.TCPClient.sendData(System.Byte[],System.Int32)">
            <summary>
            Sendet Daten an den Server
            </summary>
            <param name="data">Zu sendende Daten</param>
            <param name="length">Die Länge der zu sendenden Daten</param>
        </member>
        <member name="M:Network.TCPClient.SendCallback(System.IAsyncResult)">
            <summary>
            Callback
            </summary>
            <param name="ar">Callback Result</param>
        </member>
        <member name="M:Network.TCPClient.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Callback
            </summary>
            <param name="ar">CallbackResult</param>
        </member>
        <member name="M:Network.TCPClient.TriggerError(Network.NetworkException)">
            <summary>
            Benutzt um den Geerbten Klassen die Möglichkeit zu bieten die Fehlernachricht zu Triggern ohne das Event zu überschreiben
            </summary>
            <param name="ex">Fehler</param>
        </member>
        <member name="M:Network.TCPClient.TriggerTextRecieved(System.String,System.Byte[],System.Net.Sockets.Socket)">
            <summary>
            Benutzt um Geerbten Klassen die Möglichkeit zu geben dieses Event zu triggern
            </summary>
            <param name="input">Nachricht</param>
            <param name="byteInput">Byte Daten</param>
            <param name="client">Client</param>
        </member>
        <member name="E:Network.TCPClient.OnConnect">
            <summary>
            Das System hat sich erfolgreich zum Server verbunden
            </summary>
        </member>
        <member name="E:Network.TCPClient.OnTextRecieved">
            <summary>
            Eine neue Nachricht wurde erhalten
            </summary>
        </member>
        <member name="E:Network.TCPClient.OnError">
            <summary>
            Ein Fehler ist aufgetreten
            </summary>
        </member>
        <member name="T:Network.TCPClient.ConnectedEvent">
            <summary>
            Der Client hat sich erfolgreich zunm Server Verbunden
            </summary>
            <param name="server"></param>
        </member>
        <member name="T:Network.TCPClient.TextRecievedEvent">
            <summary>
            Neue Nachricht erhalten
            </summary>
            <param name="input">Enthaltene Textnachricht</param>
            <param name="byteInput">Erhaltene bytes</param>
            <param name="client">TCPClient Objekt, von dem die Nachricht erhalten wurde</param>
        </member>
        <member name="T:Network.TCPClient.TCPErrorEvent">
            <summary>
            Ein Fehler ist Aufgetreten
            </summary>
            <param name="exception">Aufgetretener Fehler</param>
        </member>
        <member name="T:Network.StateObject">
            <summary>
            Das für die Netzwerk Kommunikation verwendete State Objekt
            </summary>
        </member>
        <member name="F:Network.StateObject.BufferSize">
            <summary>
            Size of receive buffer.
            </summary>
        </member>
        <member name="F:Network.StateObject.workSocket">
            <summary>
            Client socket.
            </summary>
        </member>
        <member name="F:Network.StateObject.buffer">
            <summary>
            Receive buffer.
            </summary>
        </member>
        <member name="F:Network.StateObject.sb">
            <summary>
            Received data string.
            </summary>
        </member>
        <member name="T:Network.DefaultMode.TCP">
            <summary>
            Der TCP Server im Default Mode
            </summary>
        </member>
        <member name="T:Network.TCP">
            <summary>
            Der TCP Server
            </summary>
        </member>
        <member name="F:Network.TCP.close">
            <summary>
            Soll das System Beendet werden
            </summary>
        </member>
        <member name="F:Network.TCP.bufferSize">
            <summary>
            Verwendete Buffer größe
            </summary>
        </member>
        <member name="F:Network.TCP.encryt">
            <summary>
            Die verwendete Verschlüsselung
            </summary>
        </member>
        <member name="F:Network.TCP.crypto">
            <summary>
            Sollen Daten Pakete Verschlüsselt werden
            </summary>
        </member>
        <member name="F:Network.TCP.verifyClients">
            <summary>
            Sollen die verbundenen Clients überprüft werden
            </summary>
        </member>
        <member name="M:Network.TCP.#ctor(System.Int32)">
            <summary>
            Konstructor der Klasse <see cref="T:Network.TCP"/>
            </summary>
            <param name="port">Gibt den zu öffnenden Port an</param>
        </member>
        <member name="M:Network.TCP.#ctor(System.Int32,System.String)">
            <summary>
            Konstruktor der Klasse <see cref="T:Network.TCP"/>
            </summary>
            <param name="port">Gibt den zu öffnenden Port an</param>
            <param name="password">Passwort für die Verschlüsselung</param>
        </member>
        <member name="M:Network.TCP.TCP_Close">
            <summary>
            Schließt den Server
            </summary>
        </member>
        <member name="M:Network.TCP.HandleClient(System.Object)">
            <summary>
            Ein neuer Client hat Connected
            </summary>
            <param name="oClient">Übergabe eines Client Objectes</param>
        </member>
        <member name="M:Network.TCP.AsynchronousLoop(System.Net.Sockets.NetworkStream,System.Net.Sockets.TcpClient)">
            <summary>
            Funktion zum Empfangen der Nachrichten
            </summary>
            <param name="oStream">Stream</param>
            <param name="oTcpClient">Verbundener Client</param>
        </member>
        <member name="M:Network.TCP.TCP_Send(System.String,System.Net.Sockets.TcpClient)">
            <summary>
            Sendet einen String an einen bestimmen Client
            </summary>
            <param name="text">Übergibt den zu sendenen String</param>
            <param name="oTcpClient">Übergibt einen Client vom Typ <see cref="T:System.Net.Sockets.TcpClient"/></param>
        </member>
        <member name="M:Network.TCP.sendData(System.Byte[],System.Int32,System.Net.Sockets.TcpClient)">
            <summary>
            sendet Daten an den Client
            </summary>
            <param name="data">Daten</param>
            <param name="length">Länge der Datenmenge</param>
            <param name="oTcpClient">Client</param>
        </member>
        <member name="M:Network.TCP.TCP_SendByteStream(System.Byte[],System.Net.Sockets.TcpClient)">
            <summary>
            Schickt einen Byte Stream an einen Client
            </summary>
            <param name="data">Byte Stream</param>
            <param name="client">Client</param>
        </member>
        <member name="M:Network.TCP.TCP_SendToAll(System.String)">
            <summary>
            Sendet einen String an jeden verbundenen Client
            </summary>
            <param name="text">Der zu sendene Text</param>
        </member>
        <member name="M:Network.TCP.TCP_SendToAll(System.Byte[])">
            <summary>
            Sendet einen ByteStream an jeden verbundenen Client
            </summary>
            <param name="input">Die Nachricht, die an alle Clients geschickt werden soll</param>
        </member>
        <member name="M:Network.TCP.TCP_GetClient(System.Int32)">
            <summary>
            Liefert einen bestimmten Client
            </summary>
            <param name="nr">Gibt die ClientID an (beginnend mit 0)</param>
            <returns>Client Objekt</returns>
        </member>
        <member name="M:Network.TCP.TriggerError(Network.NetworkException)">
            <summary>
            Bietet geerbten Klassen das Event zu triggern
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:Network.TCP.TriggerOnTextRecieved(System.String,System.Byte[],System.Net.Sockets.TcpClient)">
            <summary>
            Bietet geerbten Klassen das Event zu triggern
            </summary>
            <param name="input">Text</param>
            <param name="byteInput">ByteData</param>
            <param name="client">Verbundener Client</param>
        </member>
        <member name="E:Network.TCP.OnTextRecieved">
            <summary>
            Eine neue Nachricht wurde erhalten
            </summary>
        </member>
        <member name="E:Network.TCP.OnClientConnected">
            <summary>
            Ein neuer Client hat sich zum System verbunden
            </summary>
        </member>
        <member name="E:Network.TCP.OnClientDisconnected">
            <summary>
            Ein Client hat sich vom  System getrennt
            </summary>
        </member>
        <member name="E:Network.TCP.OnError">
            <summary>
            Ein Fehler ist aufgetreten
            </summary>
        </member>
        <member name="P:Network.TCP.TCP_ConnectedClients">
            <summary>
            Liefert die Anzahl der Verbundenen Clients
            </summary>
        </member>
        <member name="T:Network.TCP.TextRecievedEvent">
            <summary>
            Neue Nachricht erhalten
            </summary>
            <param name="input">Enthaltene Textnachricht</param>
            <param name="byteInput">Erhaltene bytes</param>
            <param name="client">TCPClient Objekt, von dem die Nachricht erhalten wurde</param>
        </member>
        <member name="T:Network.TCP.ClientConnectedEvent">
            <summary>
            Ein neuer Client hat sich verbunden
            </summary>
            <param name="client">Client, der sich verbunden hat</param>
        </member>
        <member name="T:Network.TCP.ClientDisconnectedEvent">
            <summary>
            Ein Client hat sich vom System getrennt
            </summary>
            <param name="client">Client, der sich vom System getrennt hat</param>
        </member>
        <member name="T:Network.TCP.TCPErrorEvent">
            <summary>
            Ein Fehler ist Aufgetreten
            </summary>
            <param name="exception">Aufgetretener Fehler</param>
        </member>
        <member name="M:Network.DefaultMode.TCP.#ctor(System.Int32)">
            <summary>
            Instanziert den TCP Server im Default Mode
            </summary>
            <param name="port">Der Port auf dem der Server horchen soll</param>
        </member>
        <member name="M:Network.DefaultMode.TCP.AsynchronousLoop(System.Net.Sockets.NetworkStream,System.Net.Sockets.TcpClient)">
            <summary>
            Empfängt die Daten vom Client 
            </summary>
            <param name="oStream">Verwendeter Daten Stream</param>
            <param name="oTcpClient">Verbundener Client</param>
        </member>
        <member name="M:Network.DefaultMode.TCP.sendData(System.Byte[],System.Int32,System.Net.Sockets.TcpClient)">
            <summary>
            Sendet Daten an den Client
            </summary>
            <param name="data">Die zu sendenden Daten</param>
            <param name="length">Wird ignoriert.</param>
            <param name="oTcpClient">Der Client an den gesendet wird</param>
        </member>
        <member name="T:Network.DefaultMode.TCPClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Network.DefaultMode.TCPClient.#ctor(System.String,System.Int32)">
            <summary>
            Konstruktor für <see cref="T:Network.DefaultMode.TCPClient"/>
            </summary>
            <param name="serverIP">Die IP des Servers</param>
            <param name="port">Port</param>
        </member>
        <member name="M:Network.DefaultMode.TCPClient.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Callback
            </summary>
            <param name="ar">CallbackResult</param>
        </member>
        <member name="M:Network.DefaultMode.TCPClient.sendData(System.Byte[],System.Int32)">
            <summary>
            Sendet Daten an den Server ohne Längen Informationen zu schicken
            </summary>
            <param name="data">Daten</param>
            <param name="length">Wird Ignoriert</param>
        </member>
        <member name="T:Network.NetworkException">
            <summary>
            Die NetworkException
            </summary>
        </member>
        <member name="M:Network.NetworkException.#ctor(System.String)">
            <summary>
            Erzeugt eine neue NetworkException
            </summary>
            <param name="message">Aufgetretener Fehler</param>
        </member>
        <member name="M:Network.NetworkException.#ctor">
            <summary>
            Erzeugt eine neue NetworkException
            </summary>
        </member>
        <member name="M:Network.NetworkException.#ctor(System.String,System.Exception)">
            <summary>
            Erzeugt eine neue NetworkException
            </summary>
            <param name="message">Aufgetrener Fehler</param>
            <param name="innerException">Innerer Fehler</param>
        </member>
    </members>
</doc>
